/**
 * Module dependencies.
 */
var passport = require('passport-strategy'),
    util = require('util'),
    lookup = require('./utils').lookup;


/**
 * `Strategy` constructor.
 *
 * The local authentication strategy authenticates requests based on the
 * credentials submitted through an HTML-based login form.
 *
 * Applications must supply a `verify` callback which accepts `username` and
 * `password` credentials, and then calls the `done` callback supplying a
 * `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occured, `err` should be set.
 *
 * Optionally, `options` can be used to change the fields in which the
 * credentials are found.
 *
 * Options:
 *   - `usernameField`  field name where the username is found, defaults to _username_
 *   - `passwordField`  field name where the password is found, defaults to _password_
 *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)
 *
 * Examples:
 *
 *     passport.use(new LocalStrategy(
 *       function(username, password, done) {
 *         User.findOne({ username: username, password: password }, function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function Strategy(options, verify) {
    if (typeof options == 'function') {
        verify = options;
        options = {};
    }
    if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }

    this._usernameField = options.usernameField || 'username';
    this._passwordField = options.passwordField || 'password';
    /*
    this._titlelField = options.titlelField ||'title';
    this._authorField = options.authorField ||'author';
    this._typeField = options.typeField ||'type';
    this._categoryField = options.categoryField ||'category';
    this._publishing_companyField = options.publishing_companyField ||'publishing_company';
    this._publisherField = options.publisherField ||'publisher';
    this._release_dateField = options.release_dateField ||'release_date';
    this._sizeField = options.sizeField ||'size';
    this._quantityField = options.quantityField ||'quantity';
    this._numberpageField = options.numberpageField ||'numberpage';
    this._weightField = options.weightField ||'weight';
    this._oldpriceField = options.oldpriceField ||'oldprice';
    this._discountField = options.discountField ||'discount';
    this._summaryField = options.summaryField ||'summary';
    this._descriptionField = options.descriptionField ||'description';    */




    passport.Strategy.call(this);
    this.name = 'local';
    this._verify = verify;
    this._passReqToCallback = options.passReqToCallback;
}

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);

/**
 * Authenticate request based on the contents of a form submission.
 *
 * @param {Object} req
 * @api protected
 */
Strategy.prototype.authenticate = function(req, options) {
    options = options || {};
    var username = lookup(req.body, this._usernameField) || lookup(req.query, this._usernameField);
    var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);
    /*
    var title = lookup(req.body, this._titlelField) || lookup(req.query, this._titlelField);
    var author = lookup(req.body, this._authorField) || lookup(req.query, this._authorField);
    var type = lookup(req.body, this._typeField) || lookup(req.query, this._typeField);
    var category = lookup(req.body, this._categoryField) || lookup(req.query, this._categoryField);
    var publishing_company = lookup(req.body, this._publishing_companyField) || lookup(req.query, this._publishing_companyField);
    var publisher = lookup(req.body, this._publisherField) || lookup(req.query, this._publisherField);
    var release_date = lookup(req.body, this._release_dateField) || lookup(req.query, this._release_dateField);
    var size = lookup(req.body, this._sizeField) || lookup(req.query, this._sizeField);
    var quantity = lookup(req.body, this._quantityField) || lookup(req.query, this._quantityField);
    var numberpage = lookup(req.body, this._numberpageField) || lookup(req.query, this._numberpageField);
    var weight = lookup(req.body, this._weightField) || lookup(req.query, this._weightField);
    var oldprice = lookup(req.body, this._oldpriceField) || lookup(req.query, this._oldpriceField);
    var discount = lookup(req.body, this._discountField) || lookup(req.query, this._discountField);
    var summary = lookup(req.body, this._summaryField) || lookup(req.query, this._summaryField);
    var description = lookup(req.body, this._descriptionField) || lookup(req.query, this._descriptionField);
    */



    if (!username || !password) {
        return this.fail({ message: options.badRequestMessage || 'Missing credentials' }, 400);
    }

    var self = this;

    function verified(err, user, info) {
        if (err) { return self.error(err); }
        if (!user) { return self.fail(info); }
        self.success(user, info);
    }

    try {
        if (self._passReqToCallback) {
            this._verify(req, username, password, verified);
        } else {
            this._verify(username, password, verified);
        }
    } catch (ex) {
        return self.error(ex);
    }
};


/**
 * Expose `Strategy`.
 */
module.exports = Strategy;
