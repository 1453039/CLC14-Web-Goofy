/**
 * Module dependencies.
 */
var passport = require('passport-strategy'),
    util = require('util'),
    lookup = require('./utils').lookup;


/**
 * `Strategy` constructor.
 *
 * The local authentication strategy authenticates requests based on the
 * credentials submitted through an HTML-based login form.
 *
 * Applications must supply a `verify` callback which accepts `username` and
 * `password` credentials, and then calls the `done` callback supplying a
 * `user`, which should be set to `false` if the credentials are not valid.
 * If an exception occured, `err` should be set.
 *
 * Optionally, `options` can be used to change the fields in which the
 * credentials are found.
 *
 * Options:
 *   - `usernameField`  field name where the username is found, defaults to _username_
 *   - `passwordField`  field name where the password is found, defaults to _password_
 *   - `passReqToCallback`  when `true`, `req` is the first argument to the verify callback (default: `false`)
 *
 * Examples:
 *
 *     passport.use(new LocalStrategy(
 *       function(username, password, done) {
 *         User.findOne({ username: username, password: password }, function (err, user) {
 *           done(err, user);
 *         });
 *       }
 *     ));
 *
 * @param {Object} options
 * @param {Function} verify
 * @api public
 */
function Strategy(options, verify) {
    if (typeof options == 'function') {
        verify = options;
        options = {};
    }
    if (!verify) { throw new TypeError('LocalStrategy requires a verify callback'); }

    this._emailField = options.emailField || 'email';
    this._passwordField = options.passwordField || 'password';
    this._nameField = options.nameField || 'name';
    this._genderField = options.genderField || 'gender';
    this._dayField = options.dayField || 'day';
    this._monthField = options.monthField || 'month';
    this._yearField = options.yearField || 'year';
    this._addressField = options.addressField || 'address';
    this._telephoneField = options.telephoneField || 'telephone';

    passport.Strategy.call(this);
    this.name = 'local';
    this._verify = verify;
    this._passReqToCallback = options.passReqToCallback;
}

/**
 * Inherit from `passport.Strategy`.
 */
util.inherits(Strategy, passport.Strategy);

/**
 * Authenticate request based on the contents of a form submission.
 *
 * @param {Object} req
 * @api protected
 */
Strategy.prototype.authenticate = function(req, options) {
    options = options || {};
    var email = lookup(req.body, this._emailField) || lookup(req.query, this._emailField);
    var password = lookup(req.body, this._passwordField) || lookup(req.query, this._passwordField);
    var name = lookup(req.body, this._nameField) || lookup(req.query, this._nameField);
    var gender = lookup(req.body, this._genderField) || lookup(req.query, this._genderField);
    var day = lookup(req.body, this._dayField) || lookup(req.query, this._dayField);
    var month = lookup(req.body, this._monthField) || lookup(req.query, this._monthField);
    var year = lookup(req.body, this._yearField) || lookup(req.query, this._yearField);
    var address = lookup(req.body, this._addressField) || lookup(req.query, this._addressField);
    var telephone = lookup(req.body, this._telephoneField) || lookup(req.query, this._telephoneField);

    if (!email || !password || !name || !gender || !day || !month || !year || !address || !telephone) {
        return this.fail({ message: options.badRequestMessage || 'Missing credentials' }, 400);
    }

    var self = this;

    function verified(err, user, info) {
        if (err) { return self.error(err); }
        if (!user) { return self.fail(info); }
        self.success(user, info);
    }

    try {
        if (self._passReqToCallback) {
            this._verify(req, email, password, name, gender, day, month, year, address, telephone, verified);
        } else {
            this._verify(email, password, name, gender, day, month, year, address, telephone, verified);
        }
    } catch (ex) {
        return self.error(ex);
    }
};


/**
 * Expose `Strategy`.
 */
module.exports = Strategy;